name: Terraform AWS VPN Site-to-Site Module
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-vpn-site-to-site

description: |-
  AWS VPN Site-to-Site Module for establishing secure VPN connections between on-premises networks and AWS VPCs. This module supports both VPN Gateway and Transit Gateway configurations, offering flexible routing options, tunnel redundancy, and automated VPN connection management with comprehensive monitoring capabilities.

# Introduction to the project
introduction: |-
  The AWS VPN Site-to-Site Terraform module simplifies the process of creating and managing secure VPN connections between your on-premises network and AWS infrastructure. It provides a robust solution for establishing encrypted tunnels, supporting both static and dynamic routing protocols, and ensures high availability through redundant VPN tunnels. The module is designed to work seamlessly with AWS Transit Gateway and VPN Gateway, making it ideal for both simple and complex network architectures.

# How to use this project
usage: |-
  To use this module with Terragrunt, create a terragrunt.hcl file with the following configuration:

  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-vpn-site-to-site.git?ref=v1.0.0"
  }

  inputs = {
    customer_gateway_ip    = "1.2.3.4"
    vpn_connection_type   = "ipsec.1"
    static_routes_only    = false
    transit_gateway_id    = "tgw-xxxxx"
    tags = {
      Environment = "production"
      Project     = "network"
    }
    settings = {
      alarms = {
        enabled = true              # Enable/disable CloudWatch alarms
        for_each_tunnel = false     # If true, creates separate alarms for each tunnel
        threshold = "1"             # Threshold value for the alarm (default: 1)
        sns_topics = ["topic-name"] # List of SNS topic names to notify
        sns_topic_arns = []        # List of SNS topic ARNs (alternative to sns_topics)
      }
    }
  }
  ```
  
  "settings" Variable details:
  ```
  settings:
    alarms:
      enabled: true | false         # (optional) if true, creates alarms for the VPN
      priority: 2                   # (optional) priority of the alarm, default is 2
      for_each_tunnel: true | false # (optional) if true, creates alarms for each tunnel, default is false
      sns_topics:                   # (optional) list of SNS topics to send alarms to
        - topic1
        - topic2
      sns_topic_arns:               # (optional) list of SNS topic ARNs to send alarms to (if sns_topics is not used)
        - "arn:aws:sns:us-east-1:123456789012:topic1"
      threshold: 1 # (optional) threshold for the alarm, default is 1
    customer_gateway:
      enabled: true
      id: "cgw-12345678" # only required if you are using an existing customer gateway & enabled=false
      device_name: "device-name"
      bgp_asn: 65000
      bgp_asn_extended: 65000
      ip_address: "127.0.0.1"
      certificate_arn: "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    vpn_gateway:
      enabled: true
      id: "vgw-12345678" # only required if you are using an existing VPN gateway & enabled=false
      availability_zone: "us-east-1a"
    type: "ipsec.1"
    transit_gateway_id: "tgw-12345678"
    static_routes_only: true
    enable_acceleration: true
    local:
      ipv4_network_cidr: "x.x.x.x/x"
      ipv6_network_cidr: "xxxx:xxxx:xxxx::/x"
    remote:
      ipv4_network_cidr: "x.x.x.x/x"
      ipv6_network_cidr: "xxxx:xxxx:xxxx::/x"
    outside_ip_address_type: PublicIpv4 | PrivateIpv4
    tunnel_inside_ip_version: ipv4 | ipv6
    tunnel1:
      inside_cidr: "x.x.x.x/x"
      inside_ipv6_cidr: "xxxx:xxxx:xxxx::/x"
      preshared_key: "preshared-key"
      dpd_timeout_action: clear | none | restart
      dpd_timeout_seconds: 30
      enable_tunnel_lifecycle_control: true
      ike_versions: ["ikev1", "ikev2"]
      rekey_margin_time_seconds: 300
      rekey_fuzz_percentage: 100
      replay_window_size: 1024
      startup_action: start | add
      phase1:
        dh_group_numbers: [2, 14, 15]
        encryption_algorithms: ["aes128", "aes256"]
        integrity_algorithms: ["sha1", "sha256"]
        lifetime_seconds: 28800
      phase2:
        dh_group_numbers: [2, 14, 15]
        encryption_algorithms: ["aes128", "aes256"]
        integrity_algorithms: ["sha1", "sha256"]
        lifetime_seconds: 3600
      log:
        enabled: true
        cloudwatch_log_group_name: "vpn-logs" # Optional if not specified it creates new log group
        output_format: "json"
        retention_in_days: 30
    tunnel2:
      inside_cidr: "x.x.x.x/x"
      inside_ipv6_cidr: "xxxx:xxxx:xxxx::/x"
      preshared_key: "preshared-key"
      dpd_timeout_action: clear | none | restart
      dpd_timeout_seconds: 30
      enable_tunnel_lifecycle_control: true
      ike_versions: ["ikev1", "ikev2"]
      rekey_margin_time_seconds: 300
      rekey_fuzz_percentage: 100
      replay_window_size: 1024
      startup_action: start | add
      phase1:
        dh_group_numbers: [2, 14, 15]
        encryption_algorithms: ["aes128", "aes256"]
        integrity_algorithms: ["sha1", "sha256"]
        lifetime_seconds: 28800
      phase2:
        dh_group_numbers: [2, 14, 15]
        encryption_algorithms: ["aes128", "aes256"]
        integrity_algorithms: ["sha1", "sha256"]
        lifetime_seconds: 3600
      log:
        enabled: true
        cloudwatch_log_group_name: "vpn-logs" # Optional if not specified it creates new log group
        output_format: "json"
        retention_in_days: 30
  ```

# Example usage
examples: |-
  ### Basic VPN Connection with Transit Gateway
  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-vpn-site-to-site.git?ref=v1.0.0"
  }

  inputs = {
    customer_gateway_ip   = "203.0.113.1"
    vpn_connection_type  = "ipsec.1"
    transit_gateway_id   = dependency.transit_gateway.outputs.transit_gateway_id
    static_routes_only   = true
    static_routes        = ["192.168.0.0/24"]
    tags = {
      Environment = "production"
    }
  }
  ```
  

# How to get started quickly
quickstart: |-
  1. Ensure you have the following prerequisites:
     - AWS credentials configured
     - Terraform (>= 0.13)
     - Terragrunt installed

  2. Create a new Terragrunt project directory:
     ```bash
     mkdir vpn-project
     cd vpn-project
     ```

  3. Create a terragrunt.hcl file with the module configuration:
     ```hcl
     include "root" {
       path = find_in_parent_folders()
     }

     terraform {
       source = "git::https://github.com/cloudopsworks/terraform-module-aws-vpn-site-to-site.git?ref=v1.0.0"
     }

     inputs = {
       customer_gateway_ip = "YOUR_ON_PREMISES_IP"
       vpn_connection_type = "ipsec.1"
       static_routes_only  = true
       static_routes       = ["10.0.0.0/16"]
     }
     ```

  4. Initialize and apply the configuration:
     ```bash
     terragrunt init
     terragrunt plan
     terragrunt apply
     ```

  5. After successful application, retrieve the VPN configuration for your on-premises device using the output values.

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"